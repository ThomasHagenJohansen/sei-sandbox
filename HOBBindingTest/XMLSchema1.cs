//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace HOBBindingTest {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class TestDS : DataSet {
        
        private InfoDataTable tableInfo;
        
        private MultiControl_TextBoxDataTable tableMultiControl_TextBox;
        
        private MultiControl_ListViewDataTable tableMultiControl_ListView;
        
        private ListViewDataTable tableListView;
        
        private PagingDataTable tablePaging;
        
        private PagingListViewDataTable tablePagingListView;
        
        private PagingMulti_TextBoxDataTable tablePagingMulti_TextBox;
        
        private PagingMulti_ListViewDataTable tablePagingMulti_ListView;
        
        private DataRelation relationPagingPagingMulti_ListView;
        
        private DataRelation relationPagingPagingMulti_TextBox;
        
        private DataRelation relationPagingPagingListView;
        
        public TestDS() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected TestDS(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Info"] != null)) {
                    this.Tables.Add(new InfoDataTable(ds.Tables["Info"]));
                }
                if ((ds.Tables["MultiControl_TextBox"] != null)) {
                    this.Tables.Add(new MultiControl_TextBoxDataTable(ds.Tables["MultiControl_TextBox"]));
                }
                if ((ds.Tables["MultiControl_ListView"] != null)) {
                    this.Tables.Add(new MultiControl_ListViewDataTable(ds.Tables["MultiControl_ListView"]));
                }
                if ((ds.Tables["ListView"] != null)) {
                    this.Tables.Add(new ListViewDataTable(ds.Tables["ListView"]));
                }
                if ((ds.Tables["Paging"] != null)) {
                    this.Tables.Add(new PagingDataTable(ds.Tables["Paging"]));
                }
                if ((ds.Tables["PagingListView"] != null)) {
                    this.Tables.Add(new PagingListViewDataTable(ds.Tables["PagingListView"]));
                }
                if ((ds.Tables["PagingMulti_TextBox"] != null)) {
                    this.Tables.Add(new PagingMulti_TextBoxDataTable(ds.Tables["PagingMulti_TextBox"]));
                }
                if ((ds.Tables["PagingMulti_ListView"] != null)) {
                    this.Tables.Add(new PagingMulti_ListViewDataTable(ds.Tables["PagingMulti_ListView"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InfoDataTable Info {
            get {
                return this.tableInfo;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MultiControl_TextBoxDataTable MultiControl_TextBox {
            get {
                return this.tableMultiControl_TextBox;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MultiControl_ListViewDataTable MultiControl_ListView {
            get {
                return this.tableMultiControl_ListView;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ListViewDataTable ListView {
            get {
                return this.tableListView;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PagingDataTable Paging {
            get {
                return this.tablePaging;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PagingListViewDataTable PagingListView {
            get {
                return this.tablePagingListView;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PagingMulti_TextBoxDataTable PagingMulti_TextBox {
            get {
                return this.tablePagingMulti_TextBox;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PagingMulti_ListViewDataTable PagingMulti_ListView {
            get {
                return this.tablePagingMulti_ListView;
            }
        }
        
        public override DataSet Clone() {
            TestDS cln = ((TestDS)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Info"] != null)) {
                this.Tables.Add(new InfoDataTable(ds.Tables["Info"]));
            }
            if ((ds.Tables["MultiControl_TextBox"] != null)) {
                this.Tables.Add(new MultiControl_TextBoxDataTable(ds.Tables["MultiControl_TextBox"]));
            }
            if ((ds.Tables["MultiControl_ListView"] != null)) {
                this.Tables.Add(new MultiControl_ListViewDataTable(ds.Tables["MultiControl_ListView"]));
            }
            if ((ds.Tables["ListView"] != null)) {
                this.Tables.Add(new ListViewDataTable(ds.Tables["ListView"]));
            }
            if ((ds.Tables["Paging"] != null)) {
                this.Tables.Add(new PagingDataTable(ds.Tables["Paging"]));
            }
            if ((ds.Tables["PagingListView"] != null)) {
                this.Tables.Add(new PagingListViewDataTable(ds.Tables["PagingListView"]));
            }
            if ((ds.Tables["PagingMulti_TextBox"] != null)) {
                this.Tables.Add(new PagingMulti_TextBoxDataTable(ds.Tables["PagingMulti_TextBox"]));
            }
            if ((ds.Tables["PagingMulti_ListView"] != null)) {
                this.Tables.Add(new PagingMulti_ListViewDataTable(ds.Tables["PagingMulti_ListView"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableInfo = ((InfoDataTable)(this.Tables["Info"]));
            if ((this.tableInfo != null)) {
                this.tableInfo.InitVars();
            }
            this.tableMultiControl_TextBox = ((MultiControl_TextBoxDataTable)(this.Tables["MultiControl_TextBox"]));
            if ((this.tableMultiControl_TextBox != null)) {
                this.tableMultiControl_TextBox.InitVars();
            }
            this.tableMultiControl_ListView = ((MultiControl_ListViewDataTable)(this.Tables["MultiControl_ListView"]));
            if ((this.tableMultiControl_ListView != null)) {
                this.tableMultiControl_ListView.InitVars();
            }
            this.tableListView = ((ListViewDataTable)(this.Tables["ListView"]));
            if ((this.tableListView != null)) {
                this.tableListView.InitVars();
            }
            this.tablePaging = ((PagingDataTable)(this.Tables["Paging"]));
            if ((this.tablePaging != null)) {
                this.tablePaging.InitVars();
            }
            this.tablePagingListView = ((PagingListViewDataTable)(this.Tables["PagingListView"]));
            if ((this.tablePagingListView != null)) {
                this.tablePagingListView.InitVars();
            }
            this.tablePagingMulti_TextBox = ((PagingMulti_TextBoxDataTable)(this.Tables["PagingMulti_TextBox"]));
            if ((this.tablePagingMulti_TextBox != null)) {
                this.tablePagingMulti_TextBox.InitVars();
            }
            this.tablePagingMulti_ListView = ((PagingMulti_ListViewDataTable)(this.Tables["PagingMulti_ListView"]));
            if ((this.tablePagingMulti_ListView != null)) {
                this.tablePagingMulti_ListView.InitVars();
            }
            this.relationPagingPagingMulti_ListView = this.Relations["PagingPagingMulti_ListView"];
            this.relationPagingPagingMulti_TextBox = this.Relations["PagingPagingMulti_TextBox"];
            this.relationPagingPagingListView = this.Relations["PagingPagingListView"];
        }
        
        private void InitClass() {
            this.DataSetName = "TestDS";
            this.Prefix = "";
            this.Namespace = "";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableInfo = new InfoDataTable();
            this.Tables.Add(this.tableInfo);
            this.tableMultiControl_TextBox = new MultiControl_TextBoxDataTable();
            this.Tables.Add(this.tableMultiControl_TextBox);
            this.tableMultiControl_ListView = new MultiControl_ListViewDataTable();
            this.Tables.Add(this.tableMultiControl_ListView);
            this.tableListView = new ListViewDataTable();
            this.Tables.Add(this.tableListView);
            this.tablePaging = new PagingDataTable();
            this.Tables.Add(this.tablePaging);
            this.tablePagingListView = new PagingListViewDataTable();
            this.Tables.Add(this.tablePagingListView);
            this.tablePagingMulti_TextBox = new PagingMulti_TextBoxDataTable();
            this.Tables.Add(this.tablePagingMulti_TextBox);
            this.tablePagingMulti_ListView = new PagingMulti_ListViewDataTable();
            this.Tables.Add(this.tablePagingMulti_ListView);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("PagingPagingListView", new DataColumn[] {
                        this.tablePaging.uiRowIDColumn}, new DataColumn[] {
                        this.tablePagingListView.uiParentIDColumn});
            this.tablePagingListView.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PagingPagingMulti_TextBox", new DataColumn[] {
                        this.tablePaging.uiRowIDColumn}, new DataColumn[] {
                        this.tablePagingMulti_TextBox.uiParentIDColumn});
            this.tablePagingMulti_TextBox.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("PagingPagingMulti_ListView", new DataColumn[] {
                        this.tablePaging.uiRowIDColumn}, new DataColumn[] {
                        this.tablePagingMulti_ListView.uiParentIDColumn});
            this.tablePagingMulti_ListView.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationPagingPagingMulti_ListView = new DataRelation("PagingPagingMulti_ListView", new DataColumn[] {
                        this.tablePaging.uiRowIDColumn}, new DataColumn[] {
                        this.tablePagingMulti_ListView.uiParentIDColumn}, false);
            this.Relations.Add(this.relationPagingPagingMulti_ListView);
            this.relationPagingPagingMulti_TextBox = new DataRelation("PagingPagingMulti_TextBox", new DataColumn[] {
                        this.tablePaging.uiRowIDColumn}, new DataColumn[] {
                        this.tablePagingMulti_TextBox.uiParentIDColumn}, false);
            this.Relations.Add(this.relationPagingPagingMulti_TextBox);
            this.relationPagingPagingListView = new DataRelation("PagingPagingListView", new DataColumn[] {
                        this.tablePaging.uiRowIDColumn}, new DataColumn[] {
                        this.tablePagingListView.uiParentIDColumn}, false);
            this.Relations.Add(this.relationPagingPagingListView);
        }
        
        private bool ShouldSerializeInfo() {
            return false;
        }
        
        private bool ShouldSerializeMultiControl_TextBox() {
            return false;
        }
        
        private bool ShouldSerializeMultiControl_ListView() {
            return false;
        }
        
        private bool ShouldSerializeListView() {
            return false;
        }
        
        private bool ShouldSerializePaging() {
            return false;
        }
        
        private bool ShouldSerializePagingListView() {
            return false;
        }
        
        private bool ShouldSerializePagingMulti_TextBox() {
            return false;
        }
        
        private bool ShouldSerializePagingMulti_ListView() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void InfoRowChangeEventHandler(object sender, InfoRowChangeEvent e);
        
        public delegate void MultiControl_TextBoxRowChangeEventHandler(object sender, MultiControl_TextBoxRowChangeEvent e);
        
        public delegate void MultiControl_ListViewRowChangeEventHandler(object sender, MultiControl_ListViewRowChangeEvent e);
        
        public delegate void ListViewRowChangeEventHandler(object sender, ListViewRowChangeEvent e);
        
        public delegate void PagingRowChangeEventHandler(object sender, PagingRowChangeEvent e);
        
        public delegate void PagingListViewRowChangeEventHandler(object sender, PagingListViewRowChangeEvent e);
        
        public delegate void PagingMulti_TextBoxRowChangeEventHandler(object sender, PagingMulti_TextBoxRowChangeEvent e);
        
        public delegate void PagingMulti_ListViewRowChangeEventHandler(object sender, PagingMulti_ListViewRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InfoDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntextBox;
            
            private DataColumn columncheckBoxNormal;
            
            private DataColumn columncheckBoxInverted;
            
            private DataColumn columncheckBoxSpeciel;
            
            private DataColumn columncomboBox;
            
            private DataColumn columnradioButtonIndex;
            
            private DataColumn columnradioButtonText;
            
            private DataColumn columndateTimePicker;
            
            private DataColumn columnhScrollBar;
            
            private DataColumn columnvScrollBar;
            
            private DataColumn columndomainUpDown;
            
            private DataColumn columnnumericUpDown;
            
            private DataColumn columntrackBar;
            
            private DataColumn columnprogressBar;
            
            private DataColumn columnrichTextBox;
            
            private DataColumn columnbitmask;
            
            internal InfoDataTable() : 
                    base("Info") {
                this.InitClass();
            }
            
            internal InfoDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn textBoxColumn {
                get {
                    return this.columntextBox;
                }
            }
            
            internal DataColumn checkBoxNormalColumn {
                get {
                    return this.columncheckBoxNormal;
                }
            }
            
            internal DataColumn checkBoxInvertedColumn {
                get {
                    return this.columncheckBoxInverted;
                }
            }
            
            internal DataColumn checkBoxSpecielColumn {
                get {
                    return this.columncheckBoxSpeciel;
                }
            }
            
            internal DataColumn comboBoxColumn {
                get {
                    return this.columncomboBox;
                }
            }
            
            internal DataColumn radioButtonIndexColumn {
                get {
                    return this.columnradioButtonIndex;
                }
            }
            
            internal DataColumn radioButtonTextColumn {
                get {
                    return this.columnradioButtonText;
                }
            }
            
            internal DataColumn dateTimePickerColumn {
                get {
                    return this.columndateTimePicker;
                }
            }
            
            internal DataColumn hScrollBarColumn {
                get {
                    return this.columnhScrollBar;
                }
            }
            
            internal DataColumn vScrollBarColumn {
                get {
                    return this.columnvScrollBar;
                }
            }
            
            internal DataColumn domainUpDownColumn {
                get {
                    return this.columndomainUpDown;
                }
            }
            
            internal DataColumn numericUpDownColumn {
                get {
                    return this.columnnumericUpDown;
                }
            }
            
            internal DataColumn trackBarColumn {
                get {
                    return this.columntrackBar;
                }
            }
            
            internal DataColumn progressBarColumn {
                get {
                    return this.columnprogressBar;
                }
            }
            
            internal DataColumn richTextBoxColumn {
                get {
                    return this.columnrichTextBox;
                }
            }
            
            internal DataColumn bitmaskColumn {
                get {
                    return this.columnbitmask;
                }
            }
            
            public InfoRow this[int index] {
                get {
                    return ((InfoRow)(this.Rows[index]));
                }
            }
            
            public event InfoRowChangeEventHandler InfoRowChanged;
            
            public event InfoRowChangeEventHandler InfoRowChanging;
            
            public event InfoRowChangeEventHandler InfoRowDeleted;
            
            public event InfoRowChangeEventHandler InfoRowDeleting;
            
            public void AddInfoRow(InfoRow row) {
                this.Rows.Add(row);
            }
            
            public InfoRow AddInfoRow(
                        string textBox, 
                        bool checkBoxNormal, 
                        bool checkBoxInverted, 
                        long checkBoxSpeciel, 
                        long comboBox, 
                        long radioButtonIndex, 
                        string radioButtonText, 
                        System.DateTime dateTimePicker, 
                        long hScrollBar, 
                        long vScrollBar, 
                        string domainUpDown, 
                        long numericUpDown, 
                        long trackBar, 
                        long progressBar, 
                        string richTextBox, 
                        string bitmask) {
                InfoRow rowInfoRow = ((InfoRow)(this.NewRow()));
                rowInfoRow.ItemArray = new object[] {
                        textBox,
                        checkBoxNormal,
                        checkBoxInverted,
                        checkBoxSpeciel,
                        comboBox,
                        radioButtonIndex,
                        radioButtonText,
                        dateTimePicker,
                        hScrollBar,
                        vScrollBar,
                        domainUpDown,
                        numericUpDown,
                        trackBar,
                        progressBar,
                        richTextBox,
                        bitmask};
                this.Rows.Add(rowInfoRow);
                return rowInfoRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                InfoDataTable cln = ((InfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new InfoDataTable();
            }
            
            internal void InitVars() {
                this.columntextBox = this.Columns["textBox"];
                this.columncheckBoxNormal = this.Columns["checkBoxNormal"];
                this.columncheckBoxInverted = this.Columns["checkBoxInverted"];
                this.columncheckBoxSpeciel = this.Columns["checkBoxSpeciel"];
                this.columncomboBox = this.Columns["comboBox"];
                this.columnradioButtonIndex = this.Columns["radioButtonIndex"];
                this.columnradioButtonText = this.Columns["radioButtonText"];
                this.columndateTimePicker = this.Columns["dateTimePicker"];
                this.columnhScrollBar = this.Columns["hScrollBar"];
                this.columnvScrollBar = this.Columns["vScrollBar"];
                this.columndomainUpDown = this.Columns["domainUpDown"];
                this.columnnumericUpDown = this.Columns["numericUpDown"];
                this.columntrackBar = this.Columns["trackBar"];
                this.columnprogressBar = this.Columns["progressBar"];
                this.columnrichTextBox = this.Columns["richTextBox"];
                this.columnbitmask = this.Columns["bitmask"];
            }
            
            private void InitClass() {
                this.columntextBox = new DataColumn("textBox", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntextBox);
                this.columncheckBoxNormal = new DataColumn("checkBoxNormal", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncheckBoxNormal);
                this.columncheckBoxInverted = new DataColumn("checkBoxInverted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncheckBoxInverted);
                this.columncheckBoxSpeciel = new DataColumn("checkBoxSpeciel", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncheckBoxSpeciel);
                this.columncomboBox = new DataColumn("comboBox", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columncomboBox);
                this.columnradioButtonIndex = new DataColumn("radioButtonIndex", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnradioButtonIndex);
                this.columnradioButtonText = new DataColumn("radioButtonText", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnradioButtonText);
                this.columndateTimePicker = new DataColumn("dateTimePicker", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndateTimePicker);
                this.columnhScrollBar = new DataColumn("hScrollBar", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnhScrollBar);
                this.columnvScrollBar = new DataColumn("vScrollBar", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnvScrollBar);
                this.columndomainUpDown = new DataColumn("domainUpDown", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndomainUpDown);
                this.columnnumericUpDown = new DataColumn("numericUpDown", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnnumericUpDown);
                this.columntrackBar = new DataColumn("trackBar", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntrackBar);
                this.columnprogressBar = new DataColumn("progressBar", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnprogressBar);
                this.columnrichTextBox = new DataColumn("richTextBox", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnrichTextBox);
                this.columnbitmask = new DataColumn("bitmask", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbitmask);
            }
            
            public InfoRow NewInfoRow() {
                return ((InfoRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new InfoRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(InfoRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InfoRowChanged != null)) {
                    this.InfoRowChanged(this, new InfoRowChangeEvent(((InfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InfoRowChanging != null)) {
                    this.InfoRowChanging(this, new InfoRowChangeEvent(((InfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InfoRowDeleted != null)) {
                    this.InfoRowDeleted(this, new InfoRowChangeEvent(((InfoRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InfoRowDeleting != null)) {
                    this.InfoRowDeleting(this, new InfoRowChangeEvent(((InfoRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInfoRow(InfoRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InfoRow : DataRow {
            
            private InfoDataTable tableInfo;
            
            internal InfoRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInfo = ((InfoDataTable)(this.Table));
            }
            
            public string textBox {
                get {
                    try {
                        return ((string)(this[this.tableInfo.textBoxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.textBoxColumn] = value;
                }
            }
            
            public bool checkBoxNormal {
                get {
                    try {
                        return ((bool)(this[this.tableInfo.checkBoxNormalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.checkBoxNormalColumn] = value;
                }
            }
            
            public bool checkBoxInverted {
                get {
                    try {
                        return ((bool)(this[this.tableInfo.checkBoxInvertedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.checkBoxInvertedColumn] = value;
                }
            }
            
            public long checkBoxSpeciel {
                get {
                    try {
                        return ((long)(this[this.tableInfo.checkBoxSpecielColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.checkBoxSpecielColumn] = value;
                }
            }
            
            public long comboBox {
                get {
                    try {
                        return ((long)(this[this.tableInfo.comboBoxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.comboBoxColumn] = value;
                }
            }
            
            public long radioButtonIndex {
                get {
                    try {
                        return ((long)(this[this.tableInfo.radioButtonIndexColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.radioButtonIndexColumn] = value;
                }
            }
            
            public string radioButtonText {
                get {
                    try {
                        return ((string)(this[this.tableInfo.radioButtonTextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.radioButtonTextColumn] = value;
                }
            }
            
            public System.DateTime dateTimePicker {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInfo.dateTimePickerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.dateTimePickerColumn] = value;
                }
            }
            
            public long hScrollBar {
                get {
                    try {
                        return ((long)(this[this.tableInfo.hScrollBarColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.hScrollBarColumn] = value;
                }
            }
            
            public long vScrollBar {
                get {
                    try {
                        return ((long)(this[this.tableInfo.vScrollBarColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.vScrollBarColumn] = value;
                }
            }
            
            public string domainUpDown {
                get {
                    try {
                        return ((string)(this[this.tableInfo.domainUpDownColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.domainUpDownColumn] = value;
                }
            }
            
            public long numericUpDown {
                get {
                    try {
                        return ((long)(this[this.tableInfo.numericUpDownColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.numericUpDownColumn] = value;
                }
            }
            
            public long trackBar {
                get {
                    try {
                        return ((long)(this[this.tableInfo.trackBarColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.trackBarColumn] = value;
                }
            }
            
            public long progressBar {
                get {
                    try {
                        return ((long)(this[this.tableInfo.progressBarColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.progressBarColumn] = value;
                }
            }
            
            public string richTextBox {
                get {
                    try {
                        return ((string)(this[this.tableInfo.richTextBoxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.richTextBoxColumn] = value;
                }
            }
            
            public string bitmask {
                get {
                    try {
                        return ((string)(this[this.tableInfo.bitmaskColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfo.bitmaskColumn] = value;
                }
            }
            
            public bool IstextBoxNull() {
                return this.IsNull(this.tableInfo.textBoxColumn);
            }
            
            public void SettextBoxNull() {
                this[this.tableInfo.textBoxColumn] = System.Convert.DBNull;
            }
            
            public bool IscheckBoxNormalNull() {
                return this.IsNull(this.tableInfo.checkBoxNormalColumn);
            }
            
            public void SetcheckBoxNormalNull() {
                this[this.tableInfo.checkBoxNormalColumn] = System.Convert.DBNull;
            }
            
            public bool IscheckBoxInvertedNull() {
                return this.IsNull(this.tableInfo.checkBoxInvertedColumn);
            }
            
            public void SetcheckBoxInvertedNull() {
                this[this.tableInfo.checkBoxInvertedColumn] = System.Convert.DBNull;
            }
            
            public bool IscheckBoxSpecielNull() {
                return this.IsNull(this.tableInfo.checkBoxSpecielColumn);
            }
            
            public void SetcheckBoxSpecielNull() {
                this[this.tableInfo.checkBoxSpecielColumn] = System.Convert.DBNull;
            }
            
            public bool IscomboBoxNull() {
                return this.IsNull(this.tableInfo.comboBoxColumn);
            }
            
            public void SetcomboBoxNull() {
                this[this.tableInfo.comboBoxColumn] = System.Convert.DBNull;
            }
            
            public bool IsradioButtonIndexNull() {
                return this.IsNull(this.tableInfo.radioButtonIndexColumn);
            }
            
            public void SetradioButtonIndexNull() {
                this[this.tableInfo.radioButtonIndexColumn] = System.Convert.DBNull;
            }
            
            public bool IsradioButtonTextNull() {
                return this.IsNull(this.tableInfo.radioButtonTextColumn);
            }
            
            public void SetradioButtonTextNull() {
                this[this.tableInfo.radioButtonTextColumn] = System.Convert.DBNull;
            }
            
            public bool IsdateTimePickerNull() {
                return this.IsNull(this.tableInfo.dateTimePickerColumn);
            }
            
            public void SetdateTimePickerNull() {
                this[this.tableInfo.dateTimePickerColumn] = System.Convert.DBNull;
            }
            
            public bool IshScrollBarNull() {
                return this.IsNull(this.tableInfo.hScrollBarColumn);
            }
            
            public void SethScrollBarNull() {
                this[this.tableInfo.hScrollBarColumn] = System.Convert.DBNull;
            }
            
            public bool IsvScrollBarNull() {
                return this.IsNull(this.tableInfo.vScrollBarColumn);
            }
            
            public void SetvScrollBarNull() {
                this[this.tableInfo.vScrollBarColumn] = System.Convert.DBNull;
            }
            
            public bool IsdomainUpDownNull() {
                return this.IsNull(this.tableInfo.domainUpDownColumn);
            }
            
            public void SetdomainUpDownNull() {
                this[this.tableInfo.domainUpDownColumn] = System.Convert.DBNull;
            }
            
            public bool IsnumericUpDownNull() {
                return this.IsNull(this.tableInfo.numericUpDownColumn);
            }
            
            public void SetnumericUpDownNull() {
                this[this.tableInfo.numericUpDownColumn] = System.Convert.DBNull;
            }
            
            public bool IstrackBarNull() {
                return this.IsNull(this.tableInfo.trackBarColumn);
            }
            
            public void SettrackBarNull() {
                this[this.tableInfo.trackBarColumn] = System.Convert.DBNull;
            }
            
            public bool IsprogressBarNull() {
                return this.IsNull(this.tableInfo.progressBarColumn);
            }
            
            public void SetprogressBarNull() {
                this[this.tableInfo.progressBarColumn] = System.Convert.DBNull;
            }
            
            public bool IsrichTextBoxNull() {
                return this.IsNull(this.tableInfo.richTextBoxColumn);
            }
            
            public void SetrichTextBoxNull() {
                this[this.tableInfo.richTextBoxColumn] = System.Convert.DBNull;
            }
            
            public bool IsbitmaskNull() {
                return this.IsNull(this.tableInfo.bitmaskColumn);
            }
            
            public void SetbitmaskNull() {
                this[this.tableInfo.bitmaskColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class InfoRowChangeEvent : EventArgs {
            
            private InfoRow eventRow;
            
            private DataRowAction eventAction;
            
            public InfoRowChangeEvent(InfoRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public InfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MultiControl_TextBoxDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntxLine;
            
            internal MultiControl_TextBoxDataTable() : 
                    base("MultiControl_TextBox") {
                this.InitClass();
            }
            
            internal MultiControl_TextBoxDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn txLineColumn {
                get {
                    return this.columntxLine;
                }
            }
            
            public MultiControl_TextBoxRow this[int index] {
                get {
                    return ((MultiControl_TextBoxRow)(this.Rows[index]));
                }
            }
            
            public event MultiControl_TextBoxRowChangeEventHandler MultiControl_TextBoxRowChanged;
            
            public event MultiControl_TextBoxRowChangeEventHandler MultiControl_TextBoxRowChanging;
            
            public event MultiControl_TextBoxRowChangeEventHandler MultiControl_TextBoxRowDeleted;
            
            public event MultiControl_TextBoxRowChangeEventHandler MultiControl_TextBoxRowDeleting;
            
            public void AddMultiControl_TextBoxRow(MultiControl_TextBoxRow row) {
                this.Rows.Add(row);
            }
            
            public MultiControl_TextBoxRow AddMultiControl_TextBoxRow(string txLine) {
                MultiControl_TextBoxRow rowMultiControl_TextBoxRow = ((MultiControl_TextBoxRow)(this.NewRow()));
                rowMultiControl_TextBoxRow.ItemArray = new object[] {
                        txLine};
                this.Rows.Add(rowMultiControl_TextBoxRow);
                return rowMultiControl_TextBoxRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MultiControl_TextBoxDataTable cln = ((MultiControl_TextBoxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MultiControl_TextBoxDataTable();
            }
            
            internal void InitVars() {
                this.columntxLine = this.Columns["txLine"];
            }
            
            private void InitClass() {
                this.columntxLine = new DataColumn("txLine", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxLine);
            }
            
            public MultiControl_TextBoxRow NewMultiControl_TextBoxRow() {
                return ((MultiControl_TextBoxRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MultiControl_TextBoxRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MultiControl_TextBoxRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MultiControl_TextBoxRowChanged != null)) {
                    this.MultiControl_TextBoxRowChanged(this, new MultiControl_TextBoxRowChangeEvent(((MultiControl_TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MultiControl_TextBoxRowChanging != null)) {
                    this.MultiControl_TextBoxRowChanging(this, new MultiControl_TextBoxRowChangeEvent(((MultiControl_TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MultiControl_TextBoxRowDeleted != null)) {
                    this.MultiControl_TextBoxRowDeleted(this, new MultiControl_TextBoxRowChangeEvent(((MultiControl_TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MultiControl_TextBoxRowDeleting != null)) {
                    this.MultiControl_TextBoxRowDeleting(this, new MultiControl_TextBoxRowChangeEvent(((MultiControl_TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMultiControl_TextBoxRow(MultiControl_TextBoxRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MultiControl_TextBoxRow : DataRow {
            
            private MultiControl_TextBoxDataTable tableMultiControl_TextBox;
            
            internal MultiControl_TextBoxRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMultiControl_TextBox = ((MultiControl_TextBoxDataTable)(this.Table));
            }
            
            public string txLine {
                get {
                    try {
                        return ((string)(this[this.tableMultiControl_TextBox.txLineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMultiControl_TextBox.txLineColumn] = value;
                }
            }
            
            public bool IstxLineNull() {
                return this.IsNull(this.tableMultiControl_TextBox.txLineColumn);
            }
            
            public void SettxLineNull() {
                this[this.tableMultiControl_TextBox.txLineColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MultiControl_TextBoxRowChangeEvent : EventArgs {
            
            private MultiControl_TextBoxRow eventRow;
            
            private DataRowAction eventAction;
            
            public MultiControl_TextBoxRowChangeEvent(MultiControl_TextBoxRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MultiControl_TextBoxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MultiControl_ListViewDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuiRowID;
            
            private DataColumn columnuiSkemaID;
            
            private DataColumn columntxLine;
            
            private DataColumn columniTal;
            
            internal MultiControl_ListViewDataTable() : 
                    base("MultiControl_ListView") {
                this.InitClass();
            }
            
            internal MultiControl_ListViewDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn uiRowIDColumn {
                get {
                    return this.columnuiRowID;
                }
            }
            
            internal DataColumn uiSkemaIDColumn {
                get {
                    return this.columnuiSkemaID;
                }
            }
            
            internal DataColumn txLineColumn {
                get {
                    return this.columntxLine;
                }
            }
            
            internal DataColumn iTalColumn {
                get {
                    return this.columniTal;
                }
            }
            
            public MultiControl_ListViewRow this[int index] {
                get {
                    return ((MultiControl_ListViewRow)(this.Rows[index]));
                }
            }
            
            public event MultiControl_ListViewRowChangeEventHandler MultiControl_ListViewRowChanged;
            
            public event MultiControl_ListViewRowChangeEventHandler MultiControl_ListViewRowChanging;
            
            public event MultiControl_ListViewRowChangeEventHandler MultiControl_ListViewRowDeleted;
            
            public event MultiControl_ListViewRowChangeEventHandler MultiControl_ListViewRowDeleting;
            
            public void AddMultiControl_ListViewRow(MultiControl_ListViewRow row) {
                this.Rows.Add(row);
            }
            
            public MultiControl_ListViewRow AddMultiControl_ListViewRow(System.Guid uiRowID, System.Guid uiSkemaID, string txLine, long iTal) {
                MultiControl_ListViewRow rowMultiControl_ListViewRow = ((MultiControl_ListViewRow)(this.NewRow()));
                rowMultiControl_ListViewRow.ItemArray = new object[] {
                        uiRowID,
                        uiSkemaID,
                        txLine,
                        iTal};
                this.Rows.Add(rowMultiControl_ListViewRow);
                return rowMultiControl_ListViewRow;
            }
            
            public MultiControl_ListViewRow FindByuiRowID(System.Guid uiRowID) {
                return ((MultiControl_ListViewRow)(this.Rows.Find(new object[] {
                            uiRowID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MultiControl_ListViewDataTable cln = ((MultiControl_ListViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MultiControl_ListViewDataTable();
            }
            
            internal void InitVars() {
                this.columnuiRowID = this.Columns["uiRowID"];
                this.columnuiSkemaID = this.Columns["uiSkemaID"];
                this.columntxLine = this.Columns["txLine"];
                this.columniTal = this.Columns["iTal"];
            }
            
            private void InitClass() {
                this.columnuiRowID = new DataColumn("uiRowID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiRowID);
                this.columnuiSkemaID = new DataColumn("uiSkemaID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiSkemaID);
                this.columntxLine = new DataColumn("txLine", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxLine);
                this.columniTal = new DataColumn("iTal", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniTal);
                this.Constraints.Add(new UniqueConstraint("TestDSKey4", new DataColumn[] {
                                this.columnuiRowID}, true));
                this.columnuiRowID.AllowDBNull = false;
                this.columnuiRowID.Unique = true;
            }
            
            public MultiControl_ListViewRow NewMultiControl_ListViewRow() {
                return ((MultiControl_ListViewRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MultiControl_ListViewRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MultiControl_ListViewRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MultiControl_ListViewRowChanged != null)) {
                    this.MultiControl_ListViewRowChanged(this, new MultiControl_ListViewRowChangeEvent(((MultiControl_ListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MultiControl_ListViewRowChanging != null)) {
                    this.MultiControl_ListViewRowChanging(this, new MultiControl_ListViewRowChangeEvent(((MultiControl_ListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MultiControl_ListViewRowDeleted != null)) {
                    this.MultiControl_ListViewRowDeleted(this, new MultiControl_ListViewRowChangeEvent(((MultiControl_ListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MultiControl_ListViewRowDeleting != null)) {
                    this.MultiControl_ListViewRowDeleting(this, new MultiControl_ListViewRowChangeEvent(((MultiControl_ListViewRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMultiControl_ListViewRow(MultiControl_ListViewRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MultiControl_ListViewRow : DataRow {
            
            private MultiControl_ListViewDataTable tableMultiControl_ListView;
            
            internal MultiControl_ListViewRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMultiControl_ListView = ((MultiControl_ListViewDataTable)(this.Table));
            }
            
            public System.Guid uiRowID {
                get {
                    return ((System.Guid)(this[this.tableMultiControl_ListView.uiRowIDColumn]));
                }
                set {
                    this[this.tableMultiControl_ListView.uiRowIDColumn] = value;
                }
            }
            
            public System.Guid uiSkemaID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableMultiControl_ListView.uiSkemaIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMultiControl_ListView.uiSkemaIDColumn] = value;
                }
            }
            
            public string txLine {
                get {
                    try {
                        return ((string)(this[this.tableMultiControl_ListView.txLineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMultiControl_ListView.txLineColumn] = value;
                }
            }
            
            public long iTal {
                get {
                    try {
                        return ((long)(this[this.tableMultiControl_ListView.iTalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMultiControl_ListView.iTalColumn] = value;
                }
            }
            
            public bool IsuiSkemaIDNull() {
                return this.IsNull(this.tableMultiControl_ListView.uiSkemaIDColumn);
            }
            
            public void SetuiSkemaIDNull() {
                this[this.tableMultiControl_ListView.uiSkemaIDColumn] = System.Convert.DBNull;
            }
            
            public bool IstxLineNull() {
                return this.IsNull(this.tableMultiControl_ListView.txLineColumn);
            }
            
            public void SettxLineNull() {
                this[this.tableMultiControl_ListView.txLineColumn] = System.Convert.DBNull;
            }
            
            public bool IsiTalNull() {
                return this.IsNull(this.tableMultiControl_ListView.iTalColumn);
            }
            
            public void SetiTalNull() {
                this[this.tableMultiControl_ListView.iTalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MultiControl_ListViewRowChangeEvent : EventArgs {
            
            private MultiControl_ListViewRow eventRow;
            
            private DataRowAction eventAction;
            
            public MultiControl_ListViewRowChangeEvent(MultiControl_ListViewRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MultiControl_ListViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ListViewDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuiRowID;
            
            private DataColumn columnuiSkemaID;
            
            private DataColumn columntxString;
            
            private DataColumn columniInteger;
            
            private DataColumn columnbFlag;
            
            private DataColumn columnbInverted;
            
            private DataColumn columndtDate;
            
            private DataColumn columntxBitmask;
            
            private DataColumn columntxValueChange;
            
            internal ListViewDataTable() : 
                    base("ListView") {
                this.InitClass();
            }
            
            internal ListViewDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn uiRowIDColumn {
                get {
                    return this.columnuiRowID;
                }
            }
            
            internal DataColumn uiSkemaIDColumn {
                get {
                    return this.columnuiSkemaID;
                }
            }
            
            internal DataColumn txStringColumn {
                get {
                    return this.columntxString;
                }
            }
            
            internal DataColumn iIntegerColumn {
                get {
                    return this.columniInteger;
                }
            }
            
            internal DataColumn bFlagColumn {
                get {
                    return this.columnbFlag;
                }
            }
            
            internal DataColumn bInvertedColumn {
                get {
                    return this.columnbInverted;
                }
            }
            
            internal DataColumn dtDateColumn {
                get {
                    return this.columndtDate;
                }
            }
            
            internal DataColumn txBitmaskColumn {
                get {
                    return this.columntxBitmask;
                }
            }
            
            internal DataColumn txValueChangeColumn {
                get {
                    return this.columntxValueChange;
                }
            }
            
            public ListViewRow this[int index] {
                get {
                    return ((ListViewRow)(this.Rows[index]));
                }
            }
            
            public event ListViewRowChangeEventHandler ListViewRowChanged;
            
            public event ListViewRowChangeEventHandler ListViewRowChanging;
            
            public event ListViewRowChangeEventHandler ListViewRowDeleted;
            
            public event ListViewRowChangeEventHandler ListViewRowDeleting;
            
            public void AddListViewRow(ListViewRow row) {
                this.Rows.Add(row);
            }
            
            public ListViewRow AddListViewRow(System.Guid uiRowID, System.Guid uiSkemaID, string txString, long iInteger, bool bFlag, bool bInverted, System.DateTime dtDate, string txBitmask, string txValueChange) {
                ListViewRow rowListViewRow = ((ListViewRow)(this.NewRow()));
                rowListViewRow.ItemArray = new object[] {
                        uiRowID,
                        uiSkemaID,
                        txString,
                        iInteger,
                        bFlag,
                        bInverted,
                        dtDate,
                        txBitmask,
                        txValueChange};
                this.Rows.Add(rowListViewRow);
                return rowListViewRow;
            }
            
            public ListViewRow FindByuiRowID(System.Guid uiRowID) {
                return ((ListViewRow)(this.Rows.Find(new object[] {
                            uiRowID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ListViewDataTable cln = ((ListViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ListViewDataTable();
            }
            
            internal void InitVars() {
                this.columnuiRowID = this.Columns["uiRowID"];
                this.columnuiSkemaID = this.Columns["uiSkemaID"];
                this.columntxString = this.Columns["txString"];
                this.columniInteger = this.Columns["iInteger"];
                this.columnbFlag = this.Columns["bFlag"];
                this.columnbInverted = this.Columns["bInverted"];
                this.columndtDate = this.Columns["dtDate"];
                this.columntxBitmask = this.Columns["txBitmask"];
                this.columntxValueChange = this.Columns["txValueChange"];
            }
            
            private void InitClass() {
                this.columnuiRowID = new DataColumn("uiRowID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiRowID);
                this.columnuiSkemaID = new DataColumn("uiSkemaID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiSkemaID);
                this.columntxString = new DataColumn("txString", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxString);
                this.columniInteger = new DataColumn("iInteger", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniInteger);
                this.columnbFlag = new DataColumn("bFlag", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbFlag);
                this.columnbInverted = new DataColumn("bInverted", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbInverted);
                this.columndtDate = new DataColumn("dtDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndtDate);
                this.columntxBitmask = new DataColumn("txBitmask", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxBitmask);
                this.columntxValueChange = new DataColumn("txValueChange", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxValueChange);
                this.Constraints.Add(new UniqueConstraint("TestDSKey5", new DataColumn[] {
                                this.columnuiRowID}, true));
                this.columnuiRowID.AllowDBNull = false;
                this.columnuiRowID.Unique = true;
            }
            
            public ListViewRow NewListViewRow() {
                return ((ListViewRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ListViewRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ListViewRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ListViewRowChanged != null)) {
                    this.ListViewRowChanged(this, new ListViewRowChangeEvent(((ListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ListViewRowChanging != null)) {
                    this.ListViewRowChanging(this, new ListViewRowChangeEvent(((ListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ListViewRowDeleted != null)) {
                    this.ListViewRowDeleted(this, new ListViewRowChangeEvent(((ListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ListViewRowDeleting != null)) {
                    this.ListViewRowDeleting(this, new ListViewRowChangeEvent(((ListViewRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveListViewRow(ListViewRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ListViewRow : DataRow {
            
            private ListViewDataTable tableListView;
            
            internal ListViewRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableListView = ((ListViewDataTable)(this.Table));
            }
            
            public System.Guid uiRowID {
                get {
                    return ((System.Guid)(this[this.tableListView.uiRowIDColumn]));
                }
                set {
                    this[this.tableListView.uiRowIDColumn] = value;
                }
            }
            
            public System.Guid uiSkemaID {
                get {
                    try {
                        return ((System.Guid)(this[this.tableListView.uiSkemaIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListView.uiSkemaIDColumn] = value;
                }
            }
            
            public string txString {
                get {
                    try {
                        return ((string)(this[this.tableListView.txStringColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListView.txStringColumn] = value;
                }
            }
            
            public long iInteger {
                get {
                    try {
                        return ((long)(this[this.tableListView.iIntegerColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListView.iIntegerColumn] = value;
                }
            }
            
            public bool bFlag {
                get {
                    try {
                        return ((bool)(this[this.tableListView.bFlagColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListView.bFlagColumn] = value;
                }
            }
            
            public bool bInverted {
                get {
                    try {
                        return ((bool)(this[this.tableListView.bInvertedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListView.bInvertedColumn] = value;
                }
            }
            
            public System.DateTime dtDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableListView.dtDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListView.dtDateColumn] = value;
                }
            }
            
            public string txBitmask {
                get {
                    try {
                        return ((string)(this[this.tableListView.txBitmaskColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListView.txBitmaskColumn] = value;
                }
            }
            
            public string txValueChange {
                get {
                    try {
                        return ((string)(this[this.tableListView.txValueChangeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableListView.txValueChangeColumn] = value;
                }
            }
            
            public bool IsuiSkemaIDNull() {
                return this.IsNull(this.tableListView.uiSkemaIDColumn);
            }
            
            public void SetuiSkemaIDNull() {
                this[this.tableListView.uiSkemaIDColumn] = System.Convert.DBNull;
            }
            
            public bool IstxStringNull() {
                return this.IsNull(this.tableListView.txStringColumn);
            }
            
            public void SettxStringNull() {
                this[this.tableListView.txStringColumn] = System.Convert.DBNull;
            }
            
            public bool IsiIntegerNull() {
                return this.IsNull(this.tableListView.iIntegerColumn);
            }
            
            public void SetiIntegerNull() {
                this[this.tableListView.iIntegerColumn] = System.Convert.DBNull;
            }
            
            public bool IsbFlagNull() {
                return this.IsNull(this.tableListView.bFlagColumn);
            }
            
            public void SetbFlagNull() {
                this[this.tableListView.bFlagColumn] = System.Convert.DBNull;
            }
            
            public bool IsbInvertedNull() {
                return this.IsNull(this.tableListView.bInvertedColumn);
            }
            
            public void SetbInvertedNull() {
                this[this.tableListView.bInvertedColumn] = System.Convert.DBNull;
            }
            
            public bool IsdtDateNull() {
                return this.IsNull(this.tableListView.dtDateColumn);
            }
            
            public void SetdtDateNull() {
                this[this.tableListView.dtDateColumn] = System.Convert.DBNull;
            }
            
            public bool IstxBitmaskNull() {
                return this.IsNull(this.tableListView.txBitmaskColumn);
            }
            
            public void SettxBitmaskNull() {
                this[this.tableListView.txBitmaskColumn] = System.Convert.DBNull;
            }
            
            public bool IstxValueChangeNull() {
                return this.IsNull(this.tableListView.txValueChangeColumn);
            }
            
            public void SettxValueChangeNull() {
                this[this.tableListView.txValueChangeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ListViewRowChangeEvent : EventArgs {
            
            private ListViewRow eventRow;
            
            private DataRowAction eventAction;
            
            public ListViewRowChangeEvent(ListViewRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ListViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuiRowID;
            
            private DataColumn columnuiSkemaID;
            
            private DataColumn columniTransport;
            
            private DataColumn columntxTekst;
            
            private DataColumn columnbFlag;
            
            private DataColumn columndtDato;
            
            internal PagingDataTable() : 
                    base("Paging") {
                this.InitClass();
            }
            
            internal PagingDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn uiRowIDColumn {
                get {
                    return this.columnuiRowID;
                }
            }
            
            internal DataColumn uiSkemaIDColumn {
                get {
                    return this.columnuiSkemaID;
                }
            }
            
            internal DataColumn iTransportColumn {
                get {
                    return this.columniTransport;
                }
            }
            
            internal DataColumn txTekstColumn {
                get {
                    return this.columntxTekst;
                }
            }
            
            internal DataColumn bFlagColumn {
                get {
                    return this.columnbFlag;
                }
            }
            
            internal DataColumn dtDatoColumn {
                get {
                    return this.columndtDato;
                }
            }
            
            public PagingRow this[int index] {
                get {
                    return ((PagingRow)(this.Rows[index]));
                }
            }
            
            public event PagingRowChangeEventHandler PagingRowChanged;
            
            public event PagingRowChangeEventHandler PagingRowChanging;
            
            public event PagingRowChangeEventHandler PagingRowDeleted;
            
            public event PagingRowChangeEventHandler PagingRowDeleting;
            
            public void AddPagingRow(PagingRow row) {
                this.Rows.Add(row);
            }
            
            public PagingRow AddPagingRow(System.Guid uiRowID, System.Guid uiSkemaID, long iTransport, string txTekst, bool bFlag, System.DateTime dtDato) {
                PagingRow rowPagingRow = ((PagingRow)(this.NewRow()));
                rowPagingRow.ItemArray = new object[] {
                        uiRowID,
                        uiSkemaID,
                        iTransport,
                        txTekst,
                        bFlag,
                        dtDato};
                this.Rows.Add(rowPagingRow);
                return rowPagingRow;
            }
            
            public PagingRow FindByuiRowID(System.Guid uiRowID) {
                return ((PagingRow)(this.Rows.Find(new object[] {
                            uiRowID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PagingDataTable cln = ((PagingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PagingDataTable();
            }
            
            internal void InitVars() {
                this.columnuiRowID = this.Columns["uiRowID"];
                this.columnuiSkemaID = this.Columns["uiSkemaID"];
                this.columniTransport = this.Columns["iTransport"];
                this.columntxTekst = this.Columns["txTekst"];
                this.columnbFlag = this.Columns["bFlag"];
                this.columndtDato = this.Columns["dtDato"];
            }
            
            private void InitClass() {
                this.columnuiRowID = new DataColumn("uiRowID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiRowID);
                this.columnuiSkemaID = new DataColumn("uiSkemaID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiSkemaID);
                this.columniTransport = new DataColumn("iTransport", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniTransport);
                this.columntxTekst = new DataColumn("txTekst", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxTekst);
                this.columnbFlag = new DataColumn("bFlag", typeof(bool), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnbFlag);
                this.columndtDato = new DataColumn("dtDato", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndtDato);
                this.Constraints.Add(new UniqueConstraint("TestDSKey1", new DataColumn[] {
                                this.columnuiRowID}, true));
                this.columnuiRowID.AllowDBNull = false;
                this.columnuiRowID.Unique = true;
            }
            
            public PagingRow NewPagingRow() {
                return ((PagingRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PagingRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PagingRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PagingRowChanged != null)) {
                    this.PagingRowChanged(this, new PagingRowChangeEvent(((PagingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PagingRowChanging != null)) {
                    this.PagingRowChanging(this, new PagingRowChangeEvent(((PagingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PagingRowDeleted != null)) {
                    this.PagingRowDeleted(this, new PagingRowChangeEvent(((PagingRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PagingRowDeleting != null)) {
                    this.PagingRowDeleting(this, new PagingRowChangeEvent(((PagingRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePagingRow(PagingRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingRow : DataRow {
            
            private PagingDataTable tablePaging;
            
            internal PagingRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaging = ((PagingDataTable)(this.Table));
            }
            
            public System.Guid uiRowID {
                get {
                    return ((System.Guid)(this[this.tablePaging.uiRowIDColumn]));
                }
                set {
                    this[this.tablePaging.uiRowIDColumn] = value;
                }
            }
            
            public System.Guid uiSkemaID {
                get {
                    try {
                        return ((System.Guid)(this[this.tablePaging.uiSkemaIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaging.uiSkemaIDColumn] = value;
                }
            }
            
            public long iTransport {
                get {
                    try {
                        return ((long)(this[this.tablePaging.iTransportColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaging.iTransportColumn] = value;
                }
            }
            
            public string txTekst {
                get {
                    try {
                        return ((string)(this[this.tablePaging.txTekstColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaging.txTekstColumn] = value;
                }
            }
            
            public bool bFlag {
                get {
                    try {
                        return ((bool)(this[this.tablePaging.bFlagColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaging.bFlagColumn] = value;
                }
            }
            
            public System.DateTime dtDato {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablePaging.dtDatoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaging.dtDatoColumn] = value;
                }
            }
            
            public bool IsuiSkemaIDNull() {
                return this.IsNull(this.tablePaging.uiSkemaIDColumn);
            }
            
            public void SetuiSkemaIDNull() {
                this[this.tablePaging.uiSkemaIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsiTransportNull() {
                return this.IsNull(this.tablePaging.iTransportColumn);
            }
            
            public void SetiTransportNull() {
                this[this.tablePaging.iTransportColumn] = System.Convert.DBNull;
            }
            
            public bool IstxTekstNull() {
                return this.IsNull(this.tablePaging.txTekstColumn);
            }
            
            public void SettxTekstNull() {
                this[this.tablePaging.txTekstColumn] = System.Convert.DBNull;
            }
            
            public bool IsbFlagNull() {
                return this.IsNull(this.tablePaging.bFlagColumn);
            }
            
            public void SetbFlagNull() {
                this[this.tablePaging.bFlagColumn] = System.Convert.DBNull;
            }
            
            public bool IsdtDatoNull() {
                return this.IsNull(this.tablePaging.dtDatoColumn);
            }
            
            public void SetdtDatoNull() {
                this[this.tablePaging.dtDatoColumn] = System.Convert.DBNull;
            }
            
            public PagingMulti_ListViewRow[] GetPagingMulti_ListViewRows() {
                return ((PagingMulti_ListViewRow[])(this.GetChildRows(this.Table.ChildRelations["PagingPagingMulti_ListView"])));
            }
            
            public PagingMulti_TextBoxRow[] GetPagingMulti_TextBoxRows() {
                return ((PagingMulti_TextBoxRow[])(this.GetChildRows(this.Table.ChildRelations["PagingPagingMulti_TextBox"])));
            }
            
            public PagingListViewRow[] GetPagingListViewRows() {
                return ((PagingListViewRow[])(this.GetChildRows(this.Table.ChildRelations["PagingPagingListView"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingRowChangeEvent : EventArgs {
            
            private PagingRow eventRow;
            
            private DataRowAction eventAction;
            
            public PagingRowChangeEvent(PagingRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PagingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingListViewDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuiRowID;
            
            private DataColumn columnuiParentID;
            
            private DataColumn columnuiSkemaID;
            
            private DataColumn columntxTekst;
            
            internal PagingListViewDataTable() : 
                    base("PagingListView") {
                this.InitClass();
            }
            
            internal PagingListViewDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn uiRowIDColumn {
                get {
                    return this.columnuiRowID;
                }
            }
            
            internal DataColumn uiParentIDColumn {
                get {
                    return this.columnuiParentID;
                }
            }
            
            internal DataColumn uiSkemaIDColumn {
                get {
                    return this.columnuiSkemaID;
                }
            }
            
            internal DataColumn txTekstColumn {
                get {
                    return this.columntxTekst;
                }
            }
            
            public PagingListViewRow this[int index] {
                get {
                    return ((PagingListViewRow)(this.Rows[index]));
                }
            }
            
            public event PagingListViewRowChangeEventHandler PagingListViewRowChanged;
            
            public event PagingListViewRowChangeEventHandler PagingListViewRowChanging;
            
            public event PagingListViewRowChangeEventHandler PagingListViewRowDeleted;
            
            public event PagingListViewRowChangeEventHandler PagingListViewRowDeleting;
            
            public void AddPagingListViewRow(PagingListViewRow row) {
                this.Rows.Add(row);
            }
            
            public PagingListViewRow AddPagingListViewRow(System.Guid uiRowID, PagingRow parentPagingRowByPagingPagingListView, System.Guid uiSkemaID, string txTekst) {
                PagingListViewRow rowPagingListViewRow = ((PagingListViewRow)(this.NewRow()));
                rowPagingListViewRow.ItemArray = new object[] {
                        uiRowID,
                        parentPagingRowByPagingPagingListView[0],
                        uiSkemaID,
                        txTekst};
                this.Rows.Add(rowPagingListViewRow);
                return rowPagingListViewRow;
            }
            
            public PagingListViewRow FindByuiRowID(System.Guid uiRowID) {
                return ((PagingListViewRow)(this.Rows.Find(new object[] {
                            uiRowID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PagingListViewDataTable cln = ((PagingListViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PagingListViewDataTable();
            }
            
            internal void InitVars() {
                this.columnuiRowID = this.Columns["uiRowID"];
                this.columnuiParentID = this.Columns["uiParentID"];
                this.columnuiSkemaID = this.Columns["uiSkemaID"];
                this.columntxTekst = this.Columns["txTekst"];
            }
            
            private void InitClass() {
                this.columnuiRowID = new DataColumn("uiRowID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiRowID);
                this.columnuiParentID = new DataColumn("uiParentID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiParentID);
                this.columnuiSkemaID = new DataColumn("uiSkemaID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiSkemaID);
                this.columntxTekst = new DataColumn("txTekst", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxTekst);
                this.Constraints.Add(new UniqueConstraint("TestDSKey2", new DataColumn[] {
                                this.columnuiRowID}, true));
                this.columnuiRowID.AllowDBNull = false;
                this.columnuiRowID.Unique = true;
            }
            
            public PagingListViewRow NewPagingListViewRow() {
                return ((PagingListViewRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PagingListViewRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PagingListViewRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PagingListViewRowChanged != null)) {
                    this.PagingListViewRowChanged(this, new PagingListViewRowChangeEvent(((PagingListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PagingListViewRowChanging != null)) {
                    this.PagingListViewRowChanging(this, new PagingListViewRowChangeEvent(((PagingListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PagingListViewRowDeleted != null)) {
                    this.PagingListViewRowDeleted(this, new PagingListViewRowChangeEvent(((PagingListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PagingListViewRowDeleting != null)) {
                    this.PagingListViewRowDeleting(this, new PagingListViewRowChangeEvent(((PagingListViewRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePagingListViewRow(PagingListViewRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingListViewRow : DataRow {
            
            private PagingListViewDataTable tablePagingListView;
            
            internal PagingListViewRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePagingListView = ((PagingListViewDataTable)(this.Table));
            }
            
            public System.Guid uiRowID {
                get {
                    return ((System.Guid)(this[this.tablePagingListView.uiRowIDColumn]));
                }
                set {
                    this[this.tablePagingListView.uiRowIDColumn] = value;
                }
            }
            
            public System.Guid uiParentID {
                get {
                    try {
                        return ((System.Guid)(this[this.tablePagingListView.uiParentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagingListView.uiParentIDColumn] = value;
                }
            }
            
            public System.Guid uiSkemaID {
                get {
                    try {
                        return ((System.Guid)(this[this.tablePagingListView.uiSkemaIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagingListView.uiSkemaIDColumn] = value;
                }
            }
            
            public string txTekst {
                get {
                    try {
                        return ((string)(this[this.tablePagingListView.txTekstColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagingListView.txTekstColumn] = value;
                }
            }
            
            public PagingRow PagingRow {
                get {
                    return ((PagingRow)(this.GetParentRow(this.Table.ParentRelations["PagingPagingListView"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PagingPagingListView"]);
                }
            }
            
            public bool IsuiParentIDNull() {
                return this.IsNull(this.tablePagingListView.uiParentIDColumn);
            }
            
            public void SetuiParentIDNull() {
                this[this.tablePagingListView.uiParentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsuiSkemaIDNull() {
                return this.IsNull(this.tablePagingListView.uiSkemaIDColumn);
            }
            
            public void SetuiSkemaIDNull() {
                this[this.tablePagingListView.uiSkemaIDColumn] = System.Convert.DBNull;
            }
            
            public bool IstxTekstNull() {
                return this.IsNull(this.tablePagingListView.txTekstColumn);
            }
            
            public void SettxTekstNull() {
                this[this.tablePagingListView.txTekstColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingListViewRowChangeEvent : EventArgs {
            
            private PagingListViewRow eventRow;
            
            private DataRowAction eventAction;
            
            public PagingListViewRowChangeEvent(PagingListViewRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PagingListViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingMulti_TextBoxDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuiParentID;
            
            private DataColumn columntxLine;
            
            internal PagingMulti_TextBoxDataTable() : 
                    base("PagingMulti_TextBox") {
                this.InitClass();
            }
            
            internal PagingMulti_TextBoxDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn uiParentIDColumn {
                get {
                    return this.columnuiParentID;
                }
            }
            
            internal DataColumn txLineColumn {
                get {
                    return this.columntxLine;
                }
            }
            
            public PagingMulti_TextBoxRow this[int index] {
                get {
                    return ((PagingMulti_TextBoxRow)(this.Rows[index]));
                }
            }
            
            public event PagingMulti_TextBoxRowChangeEventHandler PagingMulti_TextBoxRowChanged;
            
            public event PagingMulti_TextBoxRowChangeEventHandler PagingMulti_TextBoxRowChanging;
            
            public event PagingMulti_TextBoxRowChangeEventHandler PagingMulti_TextBoxRowDeleted;
            
            public event PagingMulti_TextBoxRowChangeEventHandler PagingMulti_TextBoxRowDeleting;
            
            public void AddPagingMulti_TextBoxRow(PagingMulti_TextBoxRow row) {
                this.Rows.Add(row);
            }
            
            public PagingMulti_TextBoxRow AddPagingMulti_TextBoxRow(PagingRow parentPagingRowByPagingPagingMulti_TextBox, string txLine) {
                PagingMulti_TextBoxRow rowPagingMulti_TextBoxRow = ((PagingMulti_TextBoxRow)(this.NewRow()));
                rowPagingMulti_TextBoxRow.ItemArray = new object[] {
                        parentPagingRowByPagingPagingMulti_TextBox[0],
                        txLine};
                this.Rows.Add(rowPagingMulti_TextBoxRow);
                return rowPagingMulti_TextBoxRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PagingMulti_TextBoxDataTable cln = ((PagingMulti_TextBoxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PagingMulti_TextBoxDataTable();
            }
            
            internal void InitVars() {
                this.columnuiParentID = this.Columns["uiParentID"];
                this.columntxLine = this.Columns["txLine"];
            }
            
            private void InitClass() {
                this.columnuiParentID = new DataColumn("uiParentID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiParentID);
                this.columntxLine = new DataColumn("txLine", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxLine);
            }
            
            public PagingMulti_TextBoxRow NewPagingMulti_TextBoxRow() {
                return ((PagingMulti_TextBoxRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PagingMulti_TextBoxRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PagingMulti_TextBoxRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PagingMulti_TextBoxRowChanged != null)) {
                    this.PagingMulti_TextBoxRowChanged(this, new PagingMulti_TextBoxRowChangeEvent(((PagingMulti_TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PagingMulti_TextBoxRowChanging != null)) {
                    this.PagingMulti_TextBoxRowChanging(this, new PagingMulti_TextBoxRowChangeEvent(((PagingMulti_TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PagingMulti_TextBoxRowDeleted != null)) {
                    this.PagingMulti_TextBoxRowDeleted(this, new PagingMulti_TextBoxRowChangeEvent(((PagingMulti_TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PagingMulti_TextBoxRowDeleting != null)) {
                    this.PagingMulti_TextBoxRowDeleting(this, new PagingMulti_TextBoxRowChangeEvent(((PagingMulti_TextBoxRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePagingMulti_TextBoxRow(PagingMulti_TextBoxRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingMulti_TextBoxRow : DataRow {
            
            private PagingMulti_TextBoxDataTable tablePagingMulti_TextBox;
            
            internal PagingMulti_TextBoxRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePagingMulti_TextBox = ((PagingMulti_TextBoxDataTable)(this.Table));
            }
            
            public System.Guid uiParentID {
                get {
                    try {
                        return ((System.Guid)(this[this.tablePagingMulti_TextBox.uiParentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagingMulti_TextBox.uiParentIDColumn] = value;
                }
            }
            
            public string txLine {
                get {
                    try {
                        return ((string)(this[this.tablePagingMulti_TextBox.txLineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagingMulti_TextBox.txLineColumn] = value;
                }
            }
            
            public PagingRow PagingRow {
                get {
                    return ((PagingRow)(this.GetParentRow(this.Table.ParentRelations["PagingPagingMulti_TextBox"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PagingPagingMulti_TextBox"]);
                }
            }
            
            public bool IsuiParentIDNull() {
                return this.IsNull(this.tablePagingMulti_TextBox.uiParentIDColumn);
            }
            
            public void SetuiParentIDNull() {
                this[this.tablePagingMulti_TextBox.uiParentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IstxLineNull() {
                return this.IsNull(this.tablePagingMulti_TextBox.txLineColumn);
            }
            
            public void SettxLineNull() {
                this[this.tablePagingMulti_TextBox.txLineColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingMulti_TextBoxRowChangeEvent : EventArgs {
            
            private PagingMulti_TextBoxRow eventRow;
            
            private DataRowAction eventAction;
            
            public PagingMulti_TextBoxRowChangeEvent(PagingMulti_TextBoxRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PagingMulti_TextBoxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingMulti_ListViewDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuiRowID;
            
            private DataColumn columnuiParentID;
            
            private DataColumn columnuiSkemaID;
            
            private DataColumn columntxLine;
            
            private DataColumn columniTal;
            
            internal PagingMulti_ListViewDataTable() : 
                    base("PagingMulti_ListView") {
                this.InitClass();
            }
            
            internal PagingMulti_ListViewDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn uiRowIDColumn {
                get {
                    return this.columnuiRowID;
                }
            }
            
            internal DataColumn uiParentIDColumn {
                get {
                    return this.columnuiParentID;
                }
            }
            
            internal DataColumn uiSkemaIDColumn {
                get {
                    return this.columnuiSkemaID;
                }
            }
            
            internal DataColumn txLineColumn {
                get {
                    return this.columntxLine;
                }
            }
            
            internal DataColumn iTalColumn {
                get {
                    return this.columniTal;
                }
            }
            
            public PagingMulti_ListViewRow this[int index] {
                get {
                    return ((PagingMulti_ListViewRow)(this.Rows[index]));
                }
            }
            
            public event PagingMulti_ListViewRowChangeEventHandler PagingMulti_ListViewRowChanged;
            
            public event PagingMulti_ListViewRowChangeEventHandler PagingMulti_ListViewRowChanging;
            
            public event PagingMulti_ListViewRowChangeEventHandler PagingMulti_ListViewRowDeleted;
            
            public event PagingMulti_ListViewRowChangeEventHandler PagingMulti_ListViewRowDeleting;
            
            public void AddPagingMulti_ListViewRow(PagingMulti_ListViewRow row) {
                this.Rows.Add(row);
            }
            
            public PagingMulti_ListViewRow AddPagingMulti_ListViewRow(System.Guid uiRowID, PagingRow parentPagingRowByPagingPagingMulti_ListView, System.Guid uiSkemaID, string txLine, long iTal) {
                PagingMulti_ListViewRow rowPagingMulti_ListViewRow = ((PagingMulti_ListViewRow)(this.NewRow()));
                rowPagingMulti_ListViewRow.ItemArray = new object[] {
                        uiRowID,
                        parentPagingRowByPagingPagingMulti_ListView[0],
                        uiSkemaID,
                        txLine,
                        iTal};
                this.Rows.Add(rowPagingMulti_ListViewRow);
                return rowPagingMulti_ListViewRow;
            }
            
            public PagingMulti_ListViewRow FindByuiRowID(System.Guid uiRowID) {
                return ((PagingMulti_ListViewRow)(this.Rows.Find(new object[] {
                            uiRowID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PagingMulti_ListViewDataTable cln = ((PagingMulti_ListViewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PagingMulti_ListViewDataTable();
            }
            
            internal void InitVars() {
                this.columnuiRowID = this.Columns["uiRowID"];
                this.columnuiParentID = this.Columns["uiParentID"];
                this.columnuiSkemaID = this.Columns["uiSkemaID"];
                this.columntxLine = this.Columns["txLine"];
                this.columniTal = this.Columns["iTal"];
            }
            
            private void InitClass() {
                this.columnuiRowID = new DataColumn("uiRowID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiRowID);
                this.columnuiParentID = new DataColumn("uiParentID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiParentID);
                this.columnuiSkemaID = new DataColumn("uiSkemaID", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiSkemaID);
                this.columntxLine = new DataColumn("txLine", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxLine);
                this.columniTal = new DataColumn("iTal", typeof(long), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columniTal);
                this.Constraints.Add(new UniqueConstraint("TestDSKey3", new DataColumn[] {
                                this.columnuiRowID}, true));
                this.columnuiRowID.AllowDBNull = false;
                this.columnuiRowID.Unique = true;
            }
            
            public PagingMulti_ListViewRow NewPagingMulti_ListViewRow() {
                return ((PagingMulti_ListViewRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PagingMulti_ListViewRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PagingMulti_ListViewRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PagingMulti_ListViewRowChanged != null)) {
                    this.PagingMulti_ListViewRowChanged(this, new PagingMulti_ListViewRowChangeEvent(((PagingMulti_ListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PagingMulti_ListViewRowChanging != null)) {
                    this.PagingMulti_ListViewRowChanging(this, new PagingMulti_ListViewRowChangeEvent(((PagingMulti_ListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PagingMulti_ListViewRowDeleted != null)) {
                    this.PagingMulti_ListViewRowDeleted(this, new PagingMulti_ListViewRowChangeEvent(((PagingMulti_ListViewRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PagingMulti_ListViewRowDeleting != null)) {
                    this.PagingMulti_ListViewRowDeleting(this, new PagingMulti_ListViewRowChangeEvent(((PagingMulti_ListViewRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePagingMulti_ListViewRow(PagingMulti_ListViewRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingMulti_ListViewRow : DataRow {
            
            private PagingMulti_ListViewDataTable tablePagingMulti_ListView;
            
            internal PagingMulti_ListViewRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePagingMulti_ListView = ((PagingMulti_ListViewDataTable)(this.Table));
            }
            
            public System.Guid uiRowID {
                get {
                    return ((System.Guid)(this[this.tablePagingMulti_ListView.uiRowIDColumn]));
                }
                set {
                    this[this.tablePagingMulti_ListView.uiRowIDColumn] = value;
                }
            }
            
            public System.Guid uiParentID {
                get {
                    try {
                        return ((System.Guid)(this[this.tablePagingMulti_ListView.uiParentIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagingMulti_ListView.uiParentIDColumn] = value;
                }
            }
            
            public System.Guid uiSkemaID {
                get {
                    try {
                        return ((System.Guid)(this[this.tablePagingMulti_ListView.uiSkemaIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagingMulti_ListView.uiSkemaIDColumn] = value;
                }
            }
            
            public string txLine {
                get {
                    try {
                        return ((string)(this[this.tablePagingMulti_ListView.txLineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagingMulti_ListView.txLineColumn] = value;
                }
            }
            
            public long iTal {
                get {
                    try {
                        return ((long)(this[this.tablePagingMulti_ListView.iTalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePagingMulti_ListView.iTalColumn] = value;
                }
            }
            
            public PagingRow PagingRow {
                get {
                    return ((PagingRow)(this.GetParentRow(this.Table.ParentRelations["PagingPagingMulti_ListView"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["PagingPagingMulti_ListView"]);
                }
            }
            
            public bool IsuiParentIDNull() {
                return this.IsNull(this.tablePagingMulti_ListView.uiParentIDColumn);
            }
            
            public void SetuiParentIDNull() {
                this[this.tablePagingMulti_ListView.uiParentIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsuiSkemaIDNull() {
                return this.IsNull(this.tablePagingMulti_ListView.uiSkemaIDColumn);
            }
            
            public void SetuiSkemaIDNull() {
                this[this.tablePagingMulti_ListView.uiSkemaIDColumn] = System.Convert.DBNull;
            }
            
            public bool IstxLineNull() {
                return this.IsNull(this.tablePagingMulti_ListView.txLineColumn);
            }
            
            public void SettxLineNull() {
                this[this.tablePagingMulti_ListView.txLineColumn] = System.Convert.DBNull;
            }
            
            public bool IsiTalNull() {
                return this.IsNull(this.tablePagingMulti_ListView.iTalColumn);
            }
            
            public void SetiTalNull() {
                this[this.tablePagingMulti_ListView.iTalColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PagingMulti_ListViewRowChangeEvent : EventArgs {
            
            private PagingMulti_ListViewRow eventRow;
            
            private DataRowAction eventAction;
            
            public PagingMulti_ListViewRowChangeEvent(PagingMulti_ListViewRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PagingMulti_ListViewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
