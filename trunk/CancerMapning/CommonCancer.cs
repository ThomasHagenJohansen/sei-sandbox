//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Trans {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class CommonCancerSchema : DataSet {
        
        private CommonCancerDataTable tableCommonCancer;
        
        private TNMDataTable tableTNM;
        
        private txMakroGrundlagDataTable tabletxMakroGrundlag;
        
        private txMikroGrundlagDataTable tabletxMikroGrundlag;
        
        private DataRelation relationCommonCancer_TNM;
        
        private DataRelation relationCommonCancer_txMakroGrundlag;
        
        private DataRelation relationCommonCancer_txMikroGrundlag;
        
        public CommonCancerSchema() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected CommonCancerSchema(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CommonCancer"] != null)) {
                    this.Tables.Add(new CommonCancerDataTable(ds.Tables["CommonCancer"]));
                }
                if ((ds.Tables["TNM"] != null)) {
                    this.Tables.Add(new TNMDataTable(ds.Tables["TNM"]));
                }
                if ((ds.Tables["txMakroGrundlag"] != null)) {
                    this.Tables.Add(new txMakroGrundlagDataTable(ds.Tables["txMakroGrundlag"]));
                }
                if ((ds.Tables["txMikroGrundlag"] != null)) {
                    this.Tables.Add(new txMikroGrundlagDataTable(ds.Tables["txMikroGrundlag"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CommonCancerDataTable CommonCancer {
            get {
                return this.tableCommonCancer;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TNMDataTable TNM {
            get {
                return this.tableTNM;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public txMakroGrundlagDataTable txMakroGrundlag {
            get {
                return this.tabletxMakroGrundlag;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public txMikroGrundlagDataTable txMikroGrundlag {
            get {
                return this.tabletxMikroGrundlag;
            }
        }
        
        public override DataSet Clone() {
            CommonCancerSchema cln = ((CommonCancerSchema)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CommonCancer"] != null)) {
                this.Tables.Add(new CommonCancerDataTable(ds.Tables["CommonCancer"]));
            }
            if ((ds.Tables["TNM"] != null)) {
                this.Tables.Add(new TNMDataTable(ds.Tables["TNM"]));
            }
            if ((ds.Tables["txMakroGrundlag"] != null)) {
                this.Tables.Add(new txMakroGrundlagDataTable(ds.Tables["txMakroGrundlag"]));
            }
            if ((ds.Tables["txMikroGrundlag"] != null)) {
                this.Tables.Add(new txMikroGrundlagDataTable(ds.Tables["txMikroGrundlag"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCommonCancer = ((CommonCancerDataTable)(this.Tables["CommonCancer"]));
            if ((this.tableCommonCancer != null)) {
                this.tableCommonCancer.InitVars();
            }
            this.tableTNM = ((TNMDataTable)(this.Tables["TNM"]));
            if ((this.tableTNM != null)) {
                this.tableTNM.InitVars();
            }
            this.tabletxMakroGrundlag = ((txMakroGrundlagDataTable)(this.Tables["txMakroGrundlag"]));
            if ((this.tabletxMakroGrundlag != null)) {
                this.tabletxMakroGrundlag.InitVars();
            }
            this.tabletxMikroGrundlag = ((txMikroGrundlagDataTable)(this.Tables["txMikroGrundlag"]));
            if ((this.tabletxMikroGrundlag != null)) {
                this.tabletxMikroGrundlag.InitVars();
            }
            this.relationCommonCancer_TNM = this.Relations["CommonCancer_TNM"];
            this.relationCommonCancer_txMakroGrundlag = this.Relations["CommonCancer_txMakroGrundlag"];
            this.relationCommonCancer_txMikroGrundlag = this.Relations["CommonCancer_txMikroGrundlag"];
        }
        
        private void InitClass() {
            this.DataSetName = "CommonCancerSchema";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/XMLSchema.xsd";
            this.Locale = new System.Globalization.CultureInfo("da-DK");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCommonCancer = new CommonCancerDataTable();
            this.Tables.Add(this.tableCommonCancer);
            this.tableTNM = new TNMDataTable();
            this.Tables.Add(this.tableTNM);
            this.tabletxMakroGrundlag = new txMakroGrundlagDataTable();
            this.Tables.Add(this.tabletxMakroGrundlag);
            this.tabletxMikroGrundlag = new txMikroGrundlagDataTable();
            this.Tables.Add(this.tabletxMikroGrundlag);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("CommonCancer_TNM", new DataColumn[] {
                        this.tableCommonCancer.CommonCancer_IdColumn}, new DataColumn[] {
                        this.tableTNM.CommonCancer_IdColumn});
            this.tableTNM.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CommonCancer_txMakroGrundlag", new DataColumn[] {
                        this.tableCommonCancer.CommonCancer_IdColumn}, new DataColumn[] {
                        this.tabletxMakroGrundlag.CommonCancer_IdColumn});
            this.tabletxMakroGrundlag.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("CommonCancer_txMikroGrundlag", new DataColumn[] {
                        this.tableCommonCancer.CommonCancer_IdColumn}, new DataColumn[] {
                        this.tabletxMikroGrundlag.CommonCancer_IdColumn});
            this.tabletxMikroGrundlag.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationCommonCancer_TNM = new DataRelation("CommonCancer_TNM", new DataColumn[] {
                        this.tableCommonCancer.CommonCancer_IdColumn}, new DataColumn[] {
                        this.tableTNM.CommonCancer_IdColumn}, false);
            this.relationCommonCancer_TNM.Nested = true;
            this.Relations.Add(this.relationCommonCancer_TNM);
            this.relationCommonCancer_txMakroGrundlag = new DataRelation("CommonCancer_txMakroGrundlag", new DataColumn[] {
                        this.tableCommonCancer.CommonCancer_IdColumn}, new DataColumn[] {
                        this.tabletxMakroGrundlag.CommonCancer_IdColumn}, false);
            this.relationCommonCancer_txMakroGrundlag.Nested = true;
            this.Relations.Add(this.relationCommonCancer_txMakroGrundlag);
            this.relationCommonCancer_txMikroGrundlag = new DataRelation("CommonCancer_txMikroGrundlag", new DataColumn[] {
                        this.tableCommonCancer.CommonCancer_IdColumn}, new DataColumn[] {
                        this.tabletxMikroGrundlag.CommonCancer_IdColumn}, false);
            this.relationCommonCancer_txMikroGrundlag.Nested = true;
            this.Relations.Add(this.relationCommonCancer_txMikroGrundlag);
        }
        
        private bool ShouldSerializeCommonCancer() {
            return false;
        }
        
        private bool ShouldSerializeTNM() {
            return false;
        }
        
        private bool ShouldSerializetxMakroGrundlag() {
            return false;
        }
        
        private bool ShouldSerializetxMikroGrundlag() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CommonCancerRowChangeEventHandler(object sender, CommonCancerRowChangeEvent e);
        
        public delegate void TNMRowChangeEventHandler(object sender, TNMRowChangeEvent e);
        
        public delegate void txMakroGrundlagRowChangeEventHandler(object sender, txMakroGrundlagRowChangeEvent e);
        
        public delegate void txMikroGrundlagRowChangeEventHandler(object sender, txMikroGrundlagRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CommonCancerDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnuiSkemaId;
            
            private DataColumn columntxCprNr;
            
            private DataColumn columndtIncidensdato;
            
            private DataColumn columntxDiagnosekode;
            
            private DataColumn columntxLateralitet;
            
            private DataColumn columntxAA;
            
            private DataColumn columnCommonCancer_Id;
            
            internal CommonCancerDataTable() : 
                    base("CommonCancer") {
                this.InitClass();
            }
            
            internal CommonCancerDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn uiSkemaIdColumn {
                get {
                    return this.columnuiSkemaId;
                }
            }
            
            internal DataColumn txCprNrColumn {
                get {
                    return this.columntxCprNr;
                }
            }
            
            internal DataColumn dtIncidensdatoColumn {
                get {
                    return this.columndtIncidensdato;
                }
            }
            
            internal DataColumn txDiagnosekodeColumn {
                get {
                    return this.columntxDiagnosekode;
                }
            }
            
            internal DataColumn txLateralitetColumn {
                get {
                    return this.columntxLateralitet;
                }
            }
            
            internal DataColumn txAAColumn {
                get {
                    return this.columntxAA;
                }
            }
            
            internal DataColumn CommonCancer_IdColumn {
                get {
                    return this.columnCommonCancer_Id;
                }
            }
            
            public CommonCancerRow this[int index] {
                get {
                    return ((CommonCancerRow)(this.Rows[index]));
                }
            }
            
            public event CommonCancerRowChangeEventHandler CommonCancerRowChanged;
            
            public event CommonCancerRowChangeEventHandler CommonCancerRowChanging;
            
            public event CommonCancerRowChangeEventHandler CommonCancerRowDeleted;
            
            public event CommonCancerRowChangeEventHandler CommonCancerRowDeleting;
            
            public void AddCommonCancerRow(CommonCancerRow row) {
                this.Rows.Add(row);
            }
            
            public CommonCancerRow AddCommonCancerRow(System.Guid uiSkemaId, string txCprNr, System.DateTime dtIncidensdato, string txDiagnosekode, string txLateralitet, string txAA) {
                CommonCancerRow rowCommonCancerRow = ((CommonCancerRow)(this.NewRow()));
                rowCommonCancerRow.ItemArray = new object[] {
                        uiSkemaId,
                        txCprNr,
                        dtIncidensdato,
                        txDiagnosekode,
                        txLateralitet,
                        txAA,
                        null};
                this.Rows.Add(rowCommonCancerRow);
                return rowCommonCancerRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CommonCancerDataTable cln = ((CommonCancerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CommonCancerDataTable();
            }
            
            internal void InitVars() {
                this.columnuiSkemaId = this.Columns["uiSkemaId"];
                this.columntxCprNr = this.Columns["txCprNr"];
                this.columndtIncidensdato = this.Columns["dtIncidensdato"];
                this.columntxDiagnosekode = this.Columns["txDiagnosekode"];
                this.columntxLateralitet = this.Columns["txLateralitet"];
                this.columntxAA = this.Columns["txAA"];
                this.columnCommonCancer_Id = this.Columns["CommonCancer_Id"];
            }
            
            private void InitClass() {
                this.columnuiSkemaId = new DataColumn("uiSkemaId", typeof(System.Guid), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnuiSkemaId);
                this.columntxCprNr = new DataColumn("txCprNr", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxCprNr);
                this.columndtIncidensdato = new DataColumn("dtIncidensdato", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columndtIncidensdato);
                this.columntxDiagnosekode = new DataColumn("txDiagnosekode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxDiagnosekode);
                this.columntxLateralitet = new DataColumn("txLateralitet", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxLateralitet);
                this.columntxAA = new DataColumn("txAA", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxAA);
                this.columnCommonCancer_Id = new DataColumn("CommonCancer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCommonCancer_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnCommonCancer_Id}, true));
                this.columnuiSkemaId.AllowDBNull = false;
                this.columntxCprNr.AllowDBNull = false;
                this.columndtIncidensdato.AllowDBNull = false;
                this.columntxDiagnosekode.AllowDBNull = false;
                this.columnCommonCancer_Id.AutoIncrement = true;
                this.columnCommonCancer_Id.AllowDBNull = false;
                this.columnCommonCancer_Id.Unique = true;
            }
            
            public CommonCancerRow NewCommonCancerRow() {
                return ((CommonCancerRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CommonCancerRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CommonCancerRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CommonCancerRowChanged != null)) {
                    this.CommonCancerRowChanged(this, new CommonCancerRowChangeEvent(((CommonCancerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CommonCancerRowChanging != null)) {
                    this.CommonCancerRowChanging(this, new CommonCancerRowChangeEvent(((CommonCancerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CommonCancerRowDeleted != null)) {
                    this.CommonCancerRowDeleted(this, new CommonCancerRowChangeEvent(((CommonCancerRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CommonCancerRowDeleting != null)) {
                    this.CommonCancerRowDeleting(this, new CommonCancerRowChangeEvent(((CommonCancerRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCommonCancerRow(CommonCancerRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CommonCancerRow : DataRow {
            
            private CommonCancerDataTable tableCommonCancer;
            
            internal CommonCancerRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCommonCancer = ((CommonCancerDataTable)(this.Table));
            }
            
            public System.Guid uiSkemaId {
                get {
                    return ((System.Guid)(this[this.tableCommonCancer.uiSkemaIdColumn]));
                }
                set {
                    this[this.tableCommonCancer.uiSkemaIdColumn] = value;
                }
            }
            
            public string txCprNr {
                get {
                    return ((string)(this[this.tableCommonCancer.txCprNrColumn]));
                }
                set {
                    this[this.tableCommonCancer.txCprNrColumn] = value;
                }
            }
            
            public System.DateTime dtIncidensdato {
                get {
                    return ((System.DateTime)(this[this.tableCommonCancer.dtIncidensdatoColumn]));
                }
                set {
                    this[this.tableCommonCancer.dtIncidensdatoColumn] = value;
                }
            }
            
            public string txDiagnosekode {
                get {
                    return ((string)(this[this.tableCommonCancer.txDiagnosekodeColumn]));
                }
                set {
                    this[this.tableCommonCancer.txDiagnosekodeColumn] = value;
                }
            }
            
            public string txLateralitet {
                get {
                    try {
                        return ((string)(this[this.tableCommonCancer.txLateralitetColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommonCancer.txLateralitetColumn] = value;
                }
            }
            
            public string txAA {
                get {
                    try {
                        return ((string)(this[this.tableCommonCancer.txAAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCommonCancer.txAAColumn] = value;
                }
            }
            
            public bool IstxLateralitetNull() {
                return this.IsNull(this.tableCommonCancer.txLateralitetColumn);
            }
            
            public void SettxLateralitetNull() {
                this[this.tableCommonCancer.txLateralitetColumn] = System.Convert.DBNull;
            }
            
            public bool IstxAANull() {
                return this.IsNull(this.tableCommonCancer.txAAColumn);
            }
            
            public void SettxAANull() {
                this[this.tableCommonCancer.txAAColumn] = System.Convert.DBNull;
            }
            
            public TNMRow[] GetTNMRows() {
                return ((TNMRow[])(this.GetChildRows(this.Table.ChildRelations["CommonCancer_TNM"])));
            }
            
            public txMakroGrundlagRow[] GettxMakroGrundlagRows() {
                return ((txMakroGrundlagRow[])(this.GetChildRows(this.Table.ChildRelations["CommonCancer_txMakroGrundlag"])));
            }
            
            public txMikroGrundlagRow[] GettxMikroGrundlagRows() {
                return ((txMikroGrundlagRow[])(this.GetChildRows(this.Table.ChildRelations["CommonCancer_txMikroGrundlag"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CommonCancerRowChangeEvent : EventArgs {
            
            private CommonCancerRow eventRow;
            
            private DataRowAction eventAction;
            
            public CommonCancerRowChangeEvent(CommonCancerRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CommonCancerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TNMDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntxT;
            
            private DataColumn columntxN;
            
            private DataColumn columntxM;
            
            private DataColumn columnCommonCancer_Id;
            
            internal TNMDataTable() : 
                    base("TNM") {
                this.InitClass();
            }
            
            internal TNMDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn txTColumn {
                get {
                    return this.columntxT;
                }
            }
            
            internal DataColumn txNColumn {
                get {
                    return this.columntxN;
                }
            }
            
            internal DataColumn txMColumn {
                get {
                    return this.columntxM;
                }
            }
            
            internal DataColumn CommonCancer_IdColumn {
                get {
                    return this.columnCommonCancer_Id;
                }
            }
            
            public TNMRow this[int index] {
                get {
                    return ((TNMRow)(this.Rows[index]));
                }
            }
            
            public event TNMRowChangeEventHandler TNMRowChanged;
            
            public event TNMRowChangeEventHandler TNMRowChanging;
            
            public event TNMRowChangeEventHandler TNMRowDeleted;
            
            public event TNMRowChangeEventHandler TNMRowDeleting;
            
            public void AddTNMRow(TNMRow row) {
                this.Rows.Add(row);
            }
            
            public TNMRow AddTNMRow(string txT, string txN, string txM, CommonCancerRow parentCommonCancerRowByCommonCancer_TNM) {
                TNMRow rowTNMRow = ((TNMRow)(this.NewRow()));
                rowTNMRow.ItemArray = new object[] {
                        txT,
                        txN,
                        txM,
                        parentCommonCancerRowByCommonCancer_TNM[6]};
                this.Rows.Add(rowTNMRow);
                return rowTNMRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                TNMDataTable cln = ((TNMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new TNMDataTable();
            }
            
            internal void InitVars() {
                this.columntxT = this.Columns["txT"];
                this.columntxN = this.Columns["txN"];
                this.columntxM = this.Columns["txM"];
                this.columnCommonCancer_Id = this.Columns["CommonCancer_Id"];
            }
            
            private void InitClass() {
                this.columntxT = new DataColumn("txT", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxT);
                this.columntxN = new DataColumn("txN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxN);
                this.columntxM = new DataColumn("txM", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxM);
                this.columnCommonCancer_Id = new DataColumn("CommonCancer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCommonCancer_Id);
                this.columntxT.AllowDBNull = false;
                this.columntxN.AllowDBNull = false;
                this.columntxM.AllowDBNull = false;
            }
            
            public TNMRow NewTNMRow() {
                return ((TNMRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new TNMRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(TNMRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TNMRowChanged != null)) {
                    this.TNMRowChanged(this, new TNMRowChangeEvent(((TNMRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TNMRowChanging != null)) {
                    this.TNMRowChanging(this, new TNMRowChangeEvent(((TNMRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TNMRowDeleted != null)) {
                    this.TNMRowDeleted(this, new TNMRowChangeEvent(((TNMRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TNMRowDeleting != null)) {
                    this.TNMRowDeleting(this, new TNMRowChangeEvent(((TNMRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveTNMRow(TNMRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TNMRow : DataRow {
            
            private TNMDataTable tableTNM;
            
            internal TNMRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableTNM = ((TNMDataTable)(this.Table));
            }
            
            public string txT {
                get {
                    return ((string)(this[this.tableTNM.txTColumn]));
                }
                set {
                    this[this.tableTNM.txTColumn] = value;
                }
            }
            
            public string txN {
                get {
                    return ((string)(this[this.tableTNM.txNColumn]));
                }
                set {
                    this[this.tableTNM.txNColumn] = value;
                }
            }
            
            public string txM {
                get {
                    return ((string)(this[this.tableTNM.txMColumn]));
                }
                set {
                    this[this.tableTNM.txMColumn] = value;
                }
            }
            
            public CommonCancerRow CommonCancerRow {
                get {
                    return ((CommonCancerRow)(this.GetParentRow(this.Table.ParentRelations["CommonCancer_TNM"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CommonCancer_TNM"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class TNMRowChangeEvent : EventArgs {
            
            private TNMRow eventRow;
            
            private DataRowAction eventAction;
            
            public TNMRowChangeEvent(TNMRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public TNMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class txMakroGrundlagDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntxMakroGrundlag_Column;
            
            private DataColumn columnCommonCancer_Id;
            
            internal txMakroGrundlagDataTable() : 
                    base("txMakroGrundlag") {
                this.InitClass();
            }
            
            internal txMakroGrundlagDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn txMakroGrundlag_ColumnColumn {
                get {
                    return this.columntxMakroGrundlag_Column;
                }
            }
            
            internal DataColumn CommonCancer_IdColumn {
                get {
                    return this.columnCommonCancer_Id;
                }
            }
            
            public txMakroGrundlagRow this[int index] {
                get {
                    return ((txMakroGrundlagRow)(this.Rows[index]));
                }
            }
            
            public event txMakroGrundlagRowChangeEventHandler txMakroGrundlagRowChanged;
            
            public event txMakroGrundlagRowChangeEventHandler txMakroGrundlagRowChanging;
            
            public event txMakroGrundlagRowChangeEventHandler txMakroGrundlagRowDeleted;
            
            public event txMakroGrundlagRowChangeEventHandler txMakroGrundlagRowDeleting;
            
            public void AddtxMakroGrundlagRow(txMakroGrundlagRow row) {
                this.Rows.Add(row);
            }
            
            public txMakroGrundlagRow AddtxMakroGrundlagRow(string txMakroGrundlag_Column, CommonCancerRow parentCommonCancerRowByCommonCancer_txMakroGrundlag) {
                txMakroGrundlagRow rowtxMakroGrundlagRow = ((txMakroGrundlagRow)(this.NewRow()));
                rowtxMakroGrundlagRow.ItemArray = new object[] {
                        txMakroGrundlag_Column,
                        parentCommonCancerRowByCommonCancer_txMakroGrundlag[6]};
                this.Rows.Add(rowtxMakroGrundlagRow);
                return rowtxMakroGrundlagRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                txMakroGrundlagDataTable cln = ((txMakroGrundlagDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new txMakroGrundlagDataTable();
            }
            
            internal void InitVars() {
                this.columntxMakroGrundlag_Column = this.Columns["txMakroGrundlag_Column"];
                this.columnCommonCancer_Id = this.Columns["CommonCancer_Id"];
            }
            
            private void InitClass() {
                this.columntxMakroGrundlag_Column = new DataColumn("txMakroGrundlag_Column", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columntxMakroGrundlag_Column);
                this.columnCommonCancer_Id = new DataColumn("CommonCancer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCommonCancer_Id);
                this.columntxMakroGrundlag_Column.AllowDBNull = false;
            }
            
            public txMakroGrundlagRow NewtxMakroGrundlagRow() {
                return ((txMakroGrundlagRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new txMakroGrundlagRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(txMakroGrundlagRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.txMakroGrundlagRowChanged != null)) {
                    this.txMakroGrundlagRowChanged(this, new txMakroGrundlagRowChangeEvent(((txMakroGrundlagRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.txMakroGrundlagRowChanging != null)) {
                    this.txMakroGrundlagRowChanging(this, new txMakroGrundlagRowChangeEvent(((txMakroGrundlagRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.txMakroGrundlagRowDeleted != null)) {
                    this.txMakroGrundlagRowDeleted(this, new txMakroGrundlagRowChangeEvent(((txMakroGrundlagRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.txMakroGrundlagRowDeleting != null)) {
                    this.txMakroGrundlagRowDeleting(this, new txMakroGrundlagRowChangeEvent(((txMakroGrundlagRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetxMakroGrundlagRow(txMakroGrundlagRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class txMakroGrundlagRow : DataRow {
            
            private txMakroGrundlagDataTable tabletxMakroGrundlag;
            
            internal txMakroGrundlagRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletxMakroGrundlag = ((txMakroGrundlagDataTable)(this.Table));
            }
            
            public string txMakroGrundlag_Column {
                get {
                    return ((string)(this[this.tabletxMakroGrundlag.txMakroGrundlag_ColumnColumn]));
                }
                set {
                    this[this.tabletxMakroGrundlag.txMakroGrundlag_ColumnColumn] = value;
                }
            }
            
            public CommonCancerRow CommonCancerRow {
                get {
                    return ((CommonCancerRow)(this.GetParentRow(this.Table.ParentRelations["CommonCancer_txMakroGrundlag"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CommonCancer_txMakroGrundlag"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class txMakroGrundlagRowChangeEvent : EventArgs {
            
            private txMakroGrundlagRow eventRow;
            
            private DataRowAction eventAction;
            
            public txMakroGrundlagRowChangeEvent(txMakroGrundlagRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public txMakroGrundlagRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class txMikroGrundlagDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columntxMikroGrundlag_Column;
            
            private DataColumn columnCommonCancer_Id;
            
            internal txMikroGrundlagDataTable() : 
                    base("txMikroGrundlag") {
                this.InitClass();
            }
            
            internal txMikroGrundlagDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn txMikroGrundlag_ColumnColumn {
                get {
                    return this.columntxMikroGrundlag_Column;
                }
            }
            
            internal DataColumn CommonCancer_IdColumn {
                get {
                    return this.columnCommonCancer_Id;
                }
            }
            
            public txMikroGrundlagRow this[int index] {
                get {
                    return ((txMikroGrundlagRow)(this.Rows[index]));
                }
            }
            
            public event txMikroGrundlagRowChangeEventHandler txMikroGrundlagRowChanged;
            
            public event txMikroGrundlagRowChangeEventHandler txMikroGrundlagRowChanging;
            
            public event txMikroGrundlagRowChangeEventHandler txMikroGrundlagRowDeleted;
            
            public event txMikroGrundlagRowChangeEventHandler txMikroGrundlagRowDeleting;
            
            public void AddtxMikroGrundlagRow(txMikroGrundlagRow row) {
                this.Rows.Add(row);
            }
            
            public txMikroGrundlagRow AddtxMikroGrundlagRow(string txMikroGrundlag_Column, CommonCancerRow parentCommonCancerRowByCommonCancer_txMikroGrundlag) {
                txMikroGrundlagRow rowtxMikroGrundlagRow = ((txMikroGrundlagRow)(this.NewRow()));
                rowtxMikroGrundlagRow.ItemArray = new object[] {
                        txMikroGrundlag_Column,
                        parentCommonCancerRowByCommonCancer_txMikroGrundlag[6]};
                this.Rows.Add(rowtxMikroGrundlagRow);
                return rowtxMikroGrundlagRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                txMikroGrundlagDataTable cln = ((txMikroGrundlagDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new txMikroGrundlagDataTable();
            }
            
            internal void InitVars() {
                this.columntxMikroGrundlag_Column = this.Columns["txMikroGrundlag_Column"];
                this.columnCommonCancer_Id = this.Columns["CommonCancer_Id"];
            }
            
            private void InitClass() {
                this.columntxMikroGrundlag_Column = new DataColumn("txMikroGrundlag_Column", typeof(string), null, System.Data.MappingType.SimpleContent);
                this.Columns.Add(this.columntxMikroGrundlag_Column);
                this.columnCommonCancer_Id = new DataColumn("CommonCancer_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnCommonCancer_Id);
                this.columntxMikroGrundlag_Column.AllowDBNull = false;
            }
            
            public txMikroGrundlagRow NewtxMikroGrundlagRow() {
                return ((txMikroGrundlagRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new txMikroGrundlagRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(txMikroGrundlagRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.txMikroGrundlagRowChanged != null)) {
                    this.txMikroGrundlagRowChanged(this, new txMikroGrundlagRowChangeEvent(((txMikroGrundlagRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.txMikroGrundlagRowChanging != null)) {
                    this.txMikroGrundlagRowChanging(this, new txMikroGrundlagRowChangeEvent(((txMikroGrundlagRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.txMikroGrundlagRowDeleted != null)) {
                    this.txMikroGrundlagRowDeleted(this, new txMikroGrundlagRowChangeEvent(((txMikroGrundlagRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.txMikroGrundlagRowDeleting != null)) {
                    this.txMikroGrundlagRowDeleting(this, new txMikroGrundlagRowChangeEvent(((txMikroGrundlagRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovetxMikroGrundlagRow(txMikroGrundlagRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class txMikroGrundlagRow : DataRow {
            
            private txMikroGrundlagDataTable tabletxMikroGrundlag;
            
            internal txMikroGrundlagRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tabletxMikroGrundlag = ((txMikroGrundlagDataTable)(this.Table));
            }
            
            public string txMikroGrundlag_Column {
                get {
                    return ((string)(this[this.tabletxMikroGrundlag.txMikroGrundlag_ColumnColumn]));
                }
                set {
                    this[this.tabletxMikroGrundlag.txMikroGrundlag_ColumnColumn] = value;
                }
            }
            
            public CommonCancerRow CommonCancerRow {
                get {
                    return ((CommonCancerRow)(this.GetParentRow(this.Table.ParentRelations["CommonCancer_txMikroGrundlag"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CommonCancer_txMikroGrundlag"]);
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class txMikroGrundlagRowChangeEvent : EventArgs {
            
            private txMikroGrundlagRow eventRow;
            
            private DataRowAction eventAction;
            
            public txMikroGrundlagRowChangeEvent(txMikroGrundlagRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public txMikroGrundlagRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
